package aula_tcp;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
/**
 * TCPServer: Servidor para conexao TCP com Threads Descricao: Recebe uma
 * conexao, cria uma thread, recebe uma mensagem e finaliza a conexao
 */
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;


public class TCPServer {

    TCPUser user = new TCPUser("admin", "admin");
    
    
    public static void main(String args[]) {


        try {
            int serverPort = 6666; // porta do servidor

            /* cria um socket e mapeia a porta para aguardar conexao */
            ServerSocket listenSocket = new ServerSocket(serverPort);

            while (true) {
                System.out.println("Servidor aguardando conexao ...");

                /* aguarda conexoes */
                Socket clientSocket = listenSocket.accept();

                System.out.println("Cliente conectado ... Criando thread ...");

                /* cria um thread para atender a conexao */
                ClientThread c = new ClientThread(clientSocket);

                /* inicializa a thread */
                c.start();
            } //while

        } catch (IOException e) {
            System.out.println("Listen socket:" + e.getMessage());
        } //catch
    } //main
} //class

/**
 * Classe ClientThread: Thread responsavel pela comunicacao
 * Descricao: Rebebe um socket, cria os objetos de leitura e escrita,
 * aguarda msgs clientes e responde com a msg + :OK
 */
class ClientThread extends Thread {

    DataInputStream in;
    DataOutputStream out;
    Socket clientSocket;

    public ClientThread(Socket clientSocket) {
        try {
            this.clientSocket = clientSocket;
            in = new DataInputStream(clientSocket.getInputStream());
            out = new DataOutputStream(clientSocket.getOutputStream());
        } catch (IOException ioe) {
            System.out.println("Connection:" + ioe.getMessage());
        } //catch
    } //construtor

    /* metodo executado ao iniciar a thread - start() */
    @Override
    public void run() {
        try {
            Comando c = new Comando();
            String buffer = "";
            while (true) {
                buffer = in.readUTF();   /* aguarda o envio de dados */
                String teste = buffer;

                System.out.println("Cliente disse: " + buffer);
                c.setComando(buffer);
                // Split no buffer
                String[] c_split = teste.split(" ");

                if (buffer.equals("PWD")) buffer = c.pwd();
                if (c_split[0].equals("CHDIR")) buffer = c.chdir();
                if (buffer.equals("GETFILES")) buffer = c.getfiles();
                if (buffer.equals("GETDIRS")) buffer = c.getdirs();
                if (buffer.equals("EXIT")) break;

                // buffer += ":OK";
                out.writeUTF(buffer);
            }
        } catch (EOFException eofe) {
            System.out.println("EOF: " + eofe.getMessage());
        } catch (IOException ioe) {
            System.out.println("IOE: " + ioe.getMessage());
        } finally {
            try {
                in.close();
                out.close();
                clientSocket.close();
            } catch (IOException ioe) {
                System.err.println("IOE: " + ioe);
            }
        }
        System.out.println("Thread comunicação cliente finalizada.");
    } //run
} //class

class Comando {
    String comando;
    File file = new File("./");
    String rootPath = file.getAbsolutePath();

    public Comando(){}

    public void setComando (String comando) {
        this.comando = comando.toLowerCase();
    }

    public String pwd () {
        try {

            String t = file.getAbsolutePath();

            return t;
        } catch (Exception e) {
            System.err.println("ERRO: " + e);
            return "-1";
        }
    }

    public String chdir () {
        try {
            // Processo que ira executar o comando "chdir"
            String[] comando_split = comando.split(" ");

            file = new File(comando_split[1]);

            if(!file.exists()) throw new Exception("ERRO");
            
            System.out.println(comando_split[1]);

            return "SUCCESS";

        } catch (Exception e) {
            return "ERROR";
        }
    }

    public String getfiles () {
        try {

            // File folder = new File("./");
            File[] listOfFiles = file.listFiles();
            int num = 0;
            
            String res = new String("");

            for (int i = 0 ; i < listOfFiles.length ; i++) {
                if (listOfFiles[i].isFile()) {
                    res = res.concat(listOfFiles[i].getName() + "\n");
                    num++;
                };
            }
                
            res = "Numero de arquivos: " + num + "\n" + res;

            return res;
        } catch (Exception e) {
            System.err.println("ERRO: " + e);
            return "-1";
        }
    }

    public String getdirs () {
        try {

            // File folder = new File("./");
            File[] listOfFiles = file.listFiles();
            int num = 0;
            
            String res = new String("");

            for (int i = 0 ; i < listOfFiles.length ; i++) {
                if (listOfFiles[i].isDirectory()) {
                    res = res.concat(listOfFiles[i].getName() + "\n");
                    num++;
                };
                
            }
                
            res = "Numero de diretórios: " + num + "\n" + res;

            return res;

        } catch (Exception e) {
            return "ERROR";
        }
    }

}

